diff -Nrau ./Makefile ./Makefile
--- ./Makefile	2011-12-30 08:16:30.000000000 +0100
+++ ./Makefile	2012-07-27 15:12:28.000000000 +0200
@@ -586,6 +586,8 @@
 # conserve stack if available
 KBUILD_CFLAGS   += $(call cc-option,-fconserve-stack)
 
+KBUILD_CFLAGS += -Wno-unused
+
 # Add user supplied CPPFLAGS, AFLAGS and CFLAGS as the last assignments
 # But warn user when we do so
 warn-assign = \
diff -Nrau ./arch/arm/mach-bcm215xx/clock-21553.c ./arch/arm/mach-bcm215xx/clock-21553.c
--- ./arch/arm/mach-bcm215xx/clock-21553.c	2011-08-09 15:46:26.000000000 +0200
+++ ./arch/arm/mach-bcm215xx/clock-21553.c	2012-07-28 07:27:42.000000000 +0200
@@ -592,19 +592,29 @@
 int bcm21553_arm11_set_rate(struct clk *clk, unsigned long val)
 {
 	u32 mode;
-	u32 arm11_freq[2];
+	u32 arm11_freq[4];
 	u32 apps_pll_freq = bcm21553_apps_pll_get_rate();
 
-	arm11_freq[0] = FREQ_MHZ(312);
-	arm11_freq[1] = (apps_pll_freq*2)/3;
+	arm11_freq[0] = FREQ_MHZ(104);
+	arm11_freq[1] = FREQ_MHZ(312);
+	arm11_freq[2] = FREQ_MHZ(624);
+	arm11_freq[3] = (apps_pll_freq*2)/3;
 
-	/*we support only two modes  - 0xC & 0xF*/
+	/*we support only two modes  - 0xC & 0xF - thats what she said*/
 	if (val == arm11_freq[0])
 	{
-		mode = 0x0C;
+		mode = 0x09;
 	}
 	else if (val == arm11_freq[1])
 	{
+		mode = 0x0C;
+	}
+	else if (val == arm11_freq[2])
+	{
+		mode = 0x0E;
+	}
+	else if (val == arm11_freq[3])
+	{
 		mode = 0x0F;
 	} else
 	{
@@ -617,16 +627,18 @@
 
 long bcm21553_arm11_round_rate(struct clk *clk, unsigned long desired_val)
 {
-	u32 arm11_freq[2];
+	u32 arm11_freq[4];
 	u32 apps_pll_freq = bcm21553_apps_pll_get_rate();
 
 	/*we support only two freq  - 312Mhz & appPll/1.5*/
-	arm11_freq[0] = FREQ_MHZ(312);
-	arm11_freq[1] = (apps_pll_freq*2)/3;
+	arm11_freq[0] = FREQ_MHZ(104);
+	arm11_freq[1] = FREQ_MHZ(312);
+	arm11_freq[2] = FREQ_MHZ(624);
+	arm11_freq[3] = (apps_pll_freq*2)/3;
 
 	return (long)bcm21553_generic_round_rate(desired_val,
 						 arm11_freq,
-						 2);
+						 4);
 }
 
 /*AHB clock*/
diff -Nrau ./arch/arm/mach-bcm215xx/device.c ./arch/arm/mach-bcm215xx/device.c
--- ./arch/arm/mach-bcm215xx/device.c	2011-07-05 13:47:01.000000000 +0200
+++ ./arch/arm/mach-bcm215xx/device.c	2012-07-28 08:30:14.000000000 +0200
@@ -551,6 +551,8 @@
 
 #define BCM_CORECLK_TURBO	BCM21553_CORECLK_KHZ_832
 #define BCM_CORE_CLK_NORMAL	BCM21553_CORECLK_KHZ_312
+#define BCM_CORE_CLK_LOWAR	(104U*1000)
+#define BCM_CORE_CLK_HIMED	(624U*1000)
 
 #if defined(CONFIG_BCM_CPU_FREQ)
 /*********************************************************************
@@ -559,14 +561,18 @@
 
 /* Indices for the voltage to frequency mapping table */
 enum {
+	BCM_LOWAR_MODE,
 	BCM_NORMAL_MODE,
+	BCM_HIMED_MODE,
 	BCM_TURBO_MODE,
 };
 
 /* Voltage-Frequency mapping for BCM21553 CPU0 */
 static struct bcm_freq_tbl bcm215xx_cpu0_freq_tbl[] = {
-	FTBL_INIT(BCM_CORE_CLK_NORMAL / 1000, 1200000),
-	FTBL_INIT(BCM_CORECLK_TURBO / 1000, 1360000),
+	FTBL_INIT(BCM_CORE_CLK_LOWAR / 1000, 1100000),
+	FTBL_INIT(BCM_CORE_CLK_NORMAL / 1000, 1140000),
+	FTBL_INIT(BCM_CORE_CLK_HIMED / 1000, 1200000),
+	FTBL_INIT(BCM_CORECLK_TURBO / 1000, 1240000),
 };
 /* BCM21553 CPU info */
 static struct bcm_cpu_info bcm215xx_cpu_info[] = {
@@ -689,13 +695,16 @@
 		turbo = part_type_ss.nm2_turbo_voltage;
 		break;
 	}
-
-	if (normal >= 0)
+	{
+		bcm215xx_cpu0_freq_tbl[BCM_LOWAR_MODE].cpu_voltage =
+			1100000;
 		bcm215xx_cpu0_freq_tbl[BCM_NORMAL_MODE].cpu_voltage =
-			(u32)normal;
-	if (turbo >= 0)
+			1140000;
+		bcm215xx_cpu0_freq_tbl[BCM_HIMED_MODE].cpu_voltage =
+			1200000;
 		bcm215xx_cpu0_freq_tbl[BCM_TURBO_MODE].cpu_voltage =
-			(u32)turbo;
+			1240000;
+	}
 }
 #else
 #define bcm215xx_avs_notify NULL
diff -Nrau ./arch/arm/plat-bcmap/bcm_cpufreq.c ./arch/arm/plat-bcmap/bcm_cpufreq.c
--- ./arch/arm/plat-bcmap/bcm_cpufreq.c	2011-06-07 03:37:59.000000000 +0200
+++ ./arch/arm/plat-bcmap/bcm_cpufreq.c	2012-07-27 09:01:21.000000000 +0200
@@ -367,11 +367,11 @@
 	/* Get the turbo mode frequency. Switching to and from turbo mode
 	 * needs special handling.
 	 */
-	index_turbo = info->index_turbo;
+	index_turbo = info->index_turbo - 1;
 	freq_turbo = info->freq_tbl[index_turbo].cpu_freq * 1000;
 
 	/* Set APPS PLL enable bit when entering to turbo mode */
-	if (freqs.new == freq_turbo)
+	if (freqs.new >= freq_turbo)
 		clk_enable(b->appspll_en_clk);
 
 	/* freq.new will be in kHz. convert it to Hz for clk_set_rate */
@@ -380,7 +380,7 @@
 		ret = clk_set_rate(b->cpu_clk, freqs.new * 1000);
 
 	/* Clear APPS PLL enable bit when entering to normal mode */
-	if (freqs.new != freq_turbo)
+	if (freqs.new < freq_turbo)
 		clk_disable(b->appspll_en_clk);
 
 	/* If we are switching to a lower frequency, we can potentially
@@ -451,7 +451,7 @@
 	/* Set default policy and cpuinfo */
 	policy->cur = bcm_cpufreq_get_speed(0);
 	/* FIXME: Tune this value */
-	policy->cpuinfo.transition_latency = CPUFREQ_ETERNAL;
+	policy->cpuinfo.transition_latency = 10000000;
 
 	ret = bcm_create_cpufreqs_table(policy, &(b->bcm_freqs_table));
 	if (ret) {
@@ -466,6 +466,7 @@
 			__func__);
 		goto err_cpuinfo;
 	}
+	cpufreq_frequency_table_get_attr(b->bcm_freqs_table, policy->cpu);
 	b->policy = policy;
 
 	return 0;
@@ -486,6 +487,7 @@
 {
 	struct bcm_cpufreq *b = &bcm_cpufreq[policy->cpu];
 	pr_info("%s\n", __func__);
+	cpufreq_frequency_table_put_attr(policy->cpu);
 
 	kfree(b->bcm_freqs_table);
 	regulator_put(b->cpu_regulator);
diff -Nrau ./block/Kconfig.iosched ./block/Kconfig.iosched
--- ./block/Kconfig.iosched	2011-03-29 13:05:35.000000000 +0200
+++ ./block/Kconfig.iosched	2012-07-28 15:30:25.000000000 +0200
@@ -43,6 +43,16 @@
 	---help---
 	  Enable group IO scheduling in CFQ.
 
+config IOSCHED_SIO
+	tristate "Simple I/O scheduler"
+	default y
+	---help---
+	  The Simple I/O scheduler is an extremely simple scheduler,
+	  based on noop and deadline, that relies on deadlines to
+	  ensure fairness. The algorithm does not do any sorting but
+	  basic merging, trying to keep a minimum overhead. It is aimed
+	  mainly for aleatory access devices (eg: flash devices).
+
 choice
 	prompt "Default I/O scheduler"
 	default DEFAULT_CFQ
@@ -59,6 +69,9 @@
 	config DEFAULT_NOOP
 		bool "No-op"
 
+	config DEFAULT_SIO
+		bool "SIO" if IOSCHED_SIO=y
+
 endchoice
 
 config DEFAULT_IOSCHED
@@ -66,6 +79,7 @@
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
 	default "noop" if DEFAULT_NOOP
+	default "sio" if DEFAULT_SIO
 
 endmenu
 
diff -Nrau ./block/Makefile ./block/Makefile
--- ./block/Makefile	2011-03-29 13:05:35.000000000 +0200
+++ ./block/Makefile	2012-07-28 15:11:41.000000000 +0200
@@ -12,6 +12,7 @@
 obj-$(CONFIG_IOSCHED_NOOP)	+= noop-iosched.o
 obj-$(CONFIG_IOSCHED_DEADLINE)	+= deadline-iosched.o
 obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosched.o
+obj-$(CONFIG_IOSCHED_SIO)	+= sio-iosched.o
 
 obj-$(CONFIG_BLOCK_COMPAT)	+= compat_ioctl.o
 obj-$(CONFIG_BLK_DEV_INTEGRITY)	+= blk-integrity.o
diff -Nrau ./block/sio-iosched.c ./block/sio-iosched.c
--- ./block/sio-iosched.c	1970-01-01 01:00:00.000000000 +0100
+++ ./block/sio-iosched.c	2012-07-28 15:09:15.000000000 +0200
@@ -0,0 +1,396 @@
+/*
+ * Simple IO scheduler
+ * Based on Noop, Deadline and V(R) IO schedulers.
+ *
+ * Copyright (C) 2012 Miguel Boton <mboton@gmail.com>
+ *
+ *
+ * This algorithm does not do any kind of sorting, as it is aimed for
+ * aleatory access devices, but it does some basic merging. We try to
+ * keep minimum overhead to achieve low latency.
+ *
+ * Asynchronous and synchronous requests are not treated separately, but
+ * we relay on deadlines to ensure fairness.
+ *
+ */
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+
+enum { ASYNC, SYNC };
+
+/* Tunables */
+static const int sync_read_expire = HZ / 2;	/* max time before a sync read is submitted. */
+static const int sync_write_expire = 2 * HZ;	/* max time before a sync write is submitted. */
+
+static const int async_read_expire = 4 * HZ;	/* ditto for async, these limits are SOFT! */
+static const int async_write_expire = 16 * HZ;	/* ditto for async, these limits are SOFT! */
+
+static const int writes_starved = 1;		/* max times reads can starve a write */
+static const int fifo_batch     = 1;		/* # of sequential requests treated as one
+						   by the above parameters. For throughput. */
+
+/* Elevator data */
+struct sio_data {
+	/* Request queues */
+	struct list_head fifo_list[2][2];
+
+	/* Attributes */
+	unsigned int batched;
+	unsigned int starved;
+
+	/* Settings */
+	int fifo_expire[2][2];
+	int fifo_batch;
+	int writes_starved;
+};
+
+static void
+sio_merged_requests(struct request_queue *q, struct request *rq,
+		    struct request *next)
+{
+	/*
+	 * If next expires before rq, assign its expire time to rq
+	 * and move into next position (next will be deleted) in fifo.
+	 */
+	if (!list_empty(&rq->queuelist) && !list_empty(&next->queuelist)) {
+		if (time_before(rq_fifo_time(next), rq_fifo_time(rq))) {
+			list_move(&rq->queuelist, &next->queuelist);
+			rq_set_fifo_time(rq, rq_fifo_time(next));
+		}
+	}
+
+	/* Delete next request */
+	rq_fifo_clear(next);
+}
+
+static void
+sio_add_request(struct request_queue *q, struct request *rq)
+{
+	struct sio_data *sd = q->elevator->elevator_data;
+	const int sync = rq_is_sync(rq);
+	const int data_dir = rq_data_dir(rq);
+
+	/*
+	 * Add request to the proper fifo list and set its
+	 * expire time.
+	 */
+	rq_set_fifo_time(rq, jiffies + sd->fifo_expire[sync][data_dir]);
+	list_add_tail(&rq->queuelist, &sd->fifo_list[sync][data_dir]);
+}
+
+static int
+sio_queue_empty(struct request_queue *q)
+{
+	struct sio_data *sd = q->elevator->elevator_data;
+
+	/* Check if fifo lists are empty */
+	return list_empty(&sd->fifo_list[SYNC][READ]) && list_empty(&sd->fifo_list[SYNC][WRITE]) &&
+	       list_empty(&sd->fifo_list[ASYNC][READ]) && list_empty(&sd->fifo_list[ASYNC][WRITE]);
+}
+
+static struct request *
+sio_expired_request(struct sio_data *sd, int sync, int data_dir)
+{
+	struct list_head *list = &sd->fifo_list[sync][data_dir];
+	struct request *rq;
+
+	if (list_empty(list))
+		return NULL;
+
+	/* Retrieve request */
+	rq = rq_entry_fifo(list->next);
+
+	/* Request has expired */
+	if (time_after(jiffies, rq_fifo_time(rq)))
+		return rq;
+
+	return NULL;
+}
+
+static struct request *
+sio_choose_expired_request(struct sio_data *sd)
+{
+	struct request *rq;
+
+	/*
+	 * Check expired requests.
+	 * Asynchronous requests have priority over synchronous.
+	 * Write requests have priority over read.
+	 */
+	rq = sio_expired_request(sd, ASYNC, WRITE);
+	if (rq)
+		return rq;
+	rq = sio_expired_request(sd, ASYNC, READ);
+	if (rq)
+		return rq;
+
+	rq = sio_expired_request(sd, SYNC, WRITE);
+	if (rq)
+		return rq;
+	rq = sio_expired_request(sd, SYNC, READ);
+	if (rq)
+		return rq;
+
+
+	return NULL;
+}
+
+static struct request *
+sio_choose_request(struct sio_data *sd, int data_dir)
+{
+	struct list_head *sync = sd->fifo_list[SYNC];
+	struct list_head *async = sd->fifo_list[ASYNC];
+
+	/*
+	 * Retrieve request from available fifo list.
+	 * Synchronous requests have priority over asynchronous.
+	 * Read requests have priority over write.
+	 */
+	if (!list_empty(&sync[data_dir]))
+		return rq_entry_fifo(sync[data_dir].next);
+	if (!list_empty(&async[data_dir]))
+		return rq_entry_fifo(async[data_dir].next);
+
+	if (!list_empty(&sync[!data_dir]))
+		return rq_entry_fifo(sync[!data_dir].next);
+	if (!list_empty(&async[!data_dir]))
+		return rq_entry_fifo(async[!data_dir].next);
+
+	return NULL;
+}
+
+static inline void
+sio_dispatch_request(struct sio_data *sd, struct request *rq)
+{
+
+	/*
+	 * Remove the request from the fifo list
+	 * and dispatch it.
+	 */
+	rq_fifo_clear(rq);
+	elv_dispatch_add_tail(rq->q, rq);
+
+	sd->batched++;
+
+	if (rq_data_dir(rq))
+		sd->starved = 0;
+	else
+		sd->starved++;
+}
+
+static int
+sio_dispatch_requests(struct request_queue *q, int force)
+{
+	struct sio_data *sd = q->elevator->elevator_data;
+	struct request *rq = NULL;
+	int data_dir = READ;
+
+	/*
+	 * Retrieve any expired request after a batch of
+	 * sequential requests.
+	 */
+	if (sd->batched > sd->fifo_batch) {
+		sd->batched = 0;
+		rq = sio_choose_expired_request(sd);
+	}
+
+	/* Retrieve request */
+	if (!rq) {
+		if (sd->starved > sd->writes_starved)
+			data_dir = WRITE;
+
+		rq = sio_choose_request(sd, data_dir);
+		if (!rq)
+			return 0;
+	}
+
+	/* Dispatch request */
+	sio_dispatch_request(sd, rq);
+
+	return 1;
+}
+
+static struct request *
+sio_former_request(struct request_queue *q, struct request *rq)
+{
+	struct sio_data *sd = q->elevator->elevator_data;
+	const int sync = rq_is_sync(rq);
+	const int data_dir = rq_data_dir(rq);
+
+	if (rq->queuelist.prev == &sd->fifo_list[sync][data_dir])
+		return NULL;
+
+	/* Return former request */
+	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+static struct request *
+sio_latter_request(struct request_queue *q, struct request *rq)
+{
+	struct sio_data *sd = q->elevator->elevator_data;
+	const int sync = rq_is_sync(rq);
+	const int data_dir = rq_data_dir(rq);
+
+	if (rq->queuelist.next == &sd->fifo_list[sync][data_dir])
+		return NULL;
+
+	/* Return latter request */
+	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+static void *
+sio_init_queue(struct request_queue *q)
+{
+	struct sio_data *sd;
+
+	/* Allocate structure */
+	sd = kmalloc_node(sizeof(*sd), GFP_KERNEL, q->node);
+	if (!sd)
+		return NULL;
+
+	/* Initialize fifo lists */
+	INIT_LIST_HEAD(&sd->fifo_list[SYNC][READ]);
+	INIT_LIST_HEAD(&sd->fifo_list[SYNC][WRITE]);
+	INIT_LIST_HEAD(&sd->fifo_list[ASYNC][READ]);
+	INIT_LIST_HEAD(&sd->fifo_list[ASYNC][WRITE]);
+
+	/* Initialize data */
+	sd->batched = 0;
+	sd->fifo_expire[SYNC][READ] = sync_read_expire;
+	sd->fifo_expire[SYNC][WRITE] = sync_write_expire;
+	sd->fifo_expire[ASYNC][READ] = async_read_expire;
+	sd->fifo_expire[ASYNC][WRITE] = async_write_expire;
+	sd->fifo_batch = fifo_batch;
+
+	return sd;
+}
+
+static void
+sio_exit_queue(struct elevator_queue *e)
+{
+	struct sio_data *sd = e->elevator_data;
+
+	BUG_ON(!list_empty(&sd->fifo_list[SYNC][READ]));
+	BUG_ON(!list_empty(&sd->fifo_list[SYNC][WRITE]));
+	BUG_ON(!list_empty(&sd->fifo_list[ASYNC][READ]));
+	BUG_ON(!list_empty(&sd->fifo_list[ASYNC][WRITE]));
+
+	/* Free structure */
+	kfree(sd);
+}
+
+/*
+ * sysfs code
+ */
+
+static ssize_t
+sio_var_show(int var, char *page)
+{
+	return sprintf(page, "%d\n", var);
+}
+
+static ssize_t
+sio_var_store(int *var, const char *page, size_t count)
+{
+	char *p = (char *) page;
+
+	*var = simple_strtol(p, &p, 10);
+	return count;
+}
+
+#define SHOW_FUNCTION(__FUNC, __VAR, __CONV)				\
+static ssize_t __FUNC(struct elevator_queue *e, char *page)		\
+{									\
+	struct sio_data *sd = e->elevator_data;			\
+	int __data = __VAR;						\
+	if (__CONV)							\
+		__data = jiffies_to_msecs(__data);			\
+	return sio_var_show(__data, (page));			\
+}
+SHOW_FUNCTION(sio_sync_read_expire_show, sd->fifo_expire[SYNC][READ], 1);
+SHOW_FUNCTION(sio_sync_write_expire_show, sd->fifo_expire[SYNC][WRITE], 1);
+SHOW_FUNCTION(sio_async_read_expire_show, sd->fifo_expire[ASYNC][READ], 1);
+SHOW_FUNCTION(sio_async_write_expire_show, sd->fifo_expire[ASYNC][WRITE], 1);
+SHOW_FUNCTION(sio_fifo_batch_show, sd->fifo_batch, 0);
+SHOW_FUNCTION(sio_writes_starved_show, sd->writes_starved, 0);
+#undef SHOW_FUNCTION
+
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX, __CONV)			\
+static ssize_t __FUNC(struct elevator_queue *e, const char *page, size_t count)	\
+{									\
+	struct sio_data *sd = e->elevator_data;			\
+	int __data;							\
+	int ret = sio_var_store(&__data, (page), count);		\
+	if (__data < (MIN))						\
+		__data = (MIN);						\
+	else if (__data > (MAX))					\
+		__data = (MAX);						\
+	if (__CONV)							\
+		*(__PTR) = msecs_to_jiffies(__data);			\
+	else								\
+		*(__PTR) = __data;					\
+	return ret;							\
+}
+STORE_FUNCTION(sio_sync_read_expire_store, &sd->fifo_expire[SYNC][READ], 0, INT_MAX, 1);
+STORE_FUNCTION(sio_sync_write_expire_store, &sd->fifo_expire[SYNC][WRITE], 0, INT_MAX, 1);
+STORE_FUNCTION(sio_async_read_expire_store, &sd->fifo_expire[ASYNC][READ], 0, INT_MAX, 1);
+STORE_FUNCTION(sio_async_write_expire_store, &sd->fifo_expire[ASYNC][WRITE], 0, INT_MAX, 1);
+STORE_FUNCTION(sio_fifo_batch_store, &sd->fifo_batch, 0, INT_MAX, 0);
+STORE_FUNCTION(sio_writes_starved_store, &sd->writes_starved, 0, INT_MAX, 0);
+#undef STORE_FUNCTION
+
+#define DD_ATTR(name) \
+	__ATTR(name, S_IRUGO|S_IWUSR, sio_##name##_show, \
+				      sio_##name##_store)
+
+static struct elv_fs_entry sio_attrs[] = {
+	DD_ATTR(sync_read_expire),
+	DD_ATTR(sync_write_expire),
+	DD_ATTR(async_read_expire),
+	DD_ATTR(async_write_expire),
+	DD_ATTR(fifo_batch),
+	DD_ATTR(writes_starved),
+	__ATTR_NULL
+};
+
+static struct elevator_type iosched_sio = {
+	.ops = {
+		.elevator_merge_req_fn		= sio_merged_requests,
+		.elevator_dispatch_fn		= sio_dispatch_requests,
+		.elevator_add_req_fn		= sio_add_request,
+		.elevator_queue_empty_fn	= sio_queue_empty,
+		.elevator_former_req_fn		= sio_former_request,
+		.elevator_latter_req_fn		= sio_latter_request,
+		.elevator_init_fn		= sio_init_queue,
+		.elevator_exit_fn		= sio_exit_queue,
+	},
+
+	.elevator_attrs = sio_attrs,
+	.elevator_name = "sio",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init sio_init(void)
+{
+	/* Register elevator */
+	elv_register(&iosched_sio);
+
+	return 0;
+}
+
+static void __exit sio_exit(void)
+{
+	/* Unregister elevator */
+	elv_unregister(&iosched_sio);
+}
+
+module_init(sio_init);
+module_exit(sio_exit);
+
+MODULE_AUTHOR("Miguel Boton");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Simple IO scheduler");
diff -Nrau ./drivers/cpufreq/cpufreq_conservative.c ./drivers/cpufreq/cpufreq_conservative.c
--- ./drivers/cpufreq/cpufreq_conservative.c	2011-03-29 13:05:49.000000000 +0200
+++ ./drivers/cpufreq/cpufreq_conservative.c	2012-07-28 08:18:14.000000000 +0200
@@ -29,8 +29,8 @@
  * It helps to keep variable names smaller, simpler
  */
 
-#define DEF_FREQUENCY_UP_THRESHOLD		(80)
-#define DEF_FREQUENCY_DOWN_THRESHOLD		(20)
+#define DEF_FREQUENCY_UP_THRESHOLD		(85)
+#define DEF_FREQUENCY_DOWN_THRESHOLD		(50)
 
 /*
  * The polling frequency of this governor depends on the capability of
@@ -46,11 +46,12 @@
 
 static unsigned int min_sampling_rate;
 
-#define LATENCY_MULTIPLIER			(1000)
+#define LATENCY_MULTIPLIER			(500)
 #define MIN_LATENCY_MULTIPLIER			(100)
 #define DEF_SAMPLING_DOWN_FACTOR		(1)
 #define MAX_SAMPLING_DOWN_FACTOR		(10)
 #define TRANSITION_LATENCY_LIMIT		(10 * 1000 * 1000)
+#define DEFAULT_FREQUENCY_STEP		(15)
 
 static void do_dbs_timer(struct work_struct *work);
 
@@ -95,7 +96,7 @@
 	.down_threshold = DEF_FREQUENCY_DOWN_THRESHOLD,
 	.sampling_down_factor = DEF_SAMPLING_DOWN_FACTOR,
 	.ignore_nice = 0,
-	.freq_step = 5,
+	.freq_step = DEFAULT_FREQUENCY_STEP,
 };
 
 static inline cputime64_t get_cpu_idle_time_jiffy(unsigned int cpu,
diff -Nrau ./drivers/mmc/host/bcmsdhc.c ./drivers/mmc/host/bcmsdhc.c
--- ./drivers/mmc/host/bcmsdhc.c	2011-11-25 05:33:25.000000000 +0100
+++ ./drivers/mmc/host/bcmsdhc.c	2012-07-25 22:53:36.000000000 +0200
@@ -1253,17 +1253,6 @@
 	clk_enable(host->bus_clk);
 	sdhc_update_qos_req(host, 0);
 
-#ifdef CONFIG_HAS_WAKELOCK
-	/* Check for the CMD type (expect response or not) */
-	if (mmc_resp_type(mrq->cmd) == MMC_RSP_NONE) {
-		/* Not valid to use wake_lock_timeout when CMD with no response expected */
-		wake_lock(&host->sdhc_wakelock);
-	} else {
-		/*Wakelock for the bcm_sdhc should be active for the longer period when CMD expects response from the card */
-		wake_lock_timeout(&host->sdhc_wakelock, msecs_to_jiffies(500));
-	}
-#endif
-
 #if defined(CONFIG_ARCH_BCM116X)  || defined(CONFIG_ARCH_BCM215XX)
 	/* For SD card power saving */
 	set_voltage = readb(host->ioaddr + SDHC_POWER_CONTROL);
@@ -1284,12 +1273,6 @@
 	}
 	/* Unlock the wakelock immediately after sending the command with no response
 	   On PM suspend case, deselcting card CMD will be send with no response */
-#ifdef CONFIG_HAS_WAKELOCK
-	if (mmc_resp_type(mrq->cmd) == MMC_RSP_NONE) {
-		/* unlock after CMD transaction */
-		wake_unlock(&host->sdhc_wakelock);
-	}
-#endif
 	mmiowb();
 	spin_unlock_irqrestore(&host->lock, flags);
 }
@@ -2381,10 +2364,6 @@
 	sd_inserted = host->card_present;
 	
 	bcmsdhc_init(host, SOFT_RESET_ALL);
-#ifdef CONFIG_HAS_WAKELOCK
-	wake_lock_init(&host->sdhc_wakelock, WAKE_LOCK_SUSPEND,
-		       dev_name(&pdev->dev));
-#endif
 
 #ifdef CONFIG_MMC_DEBUG
 /*      bcmsdhc_dumpregs(host); */
@@ -2460,10 +2439,6 @@
 	led_classdev_unregister(&host->led);
 #endif
 
-#ifdef CONFIG_HAS_WAKELOCK
-	wake_lock_destroy(&host->sdhc_wakelock);
-#endif
-
 	sdio_remove_qos_req(host);
 
 	bcmsdhc_reset(host, SOFT_RESET_ALL);
diff -Nrau ./drivers/video/backlight/aat1401_bl.c ./drivers/video/backlight/aat1401_bl.c
--- ./drivers/video/backlight/aat1401_bl.c	2011-09-15 14:17:47.000000000 +0200
+++ ./drivers/video/backlight/aat1401_bl.c	2012-07-28 07:56:00.000000000 +0200
@@ -55,7 +55,7 @@
 
 #define MAX_BRIGHTNESS_IN_BLU	33
 #if defined(CONFIG_BACKLIGHT_TOTORO)
-#define DIMMING_VALUE		2
+#define DIMMING_VALUE		1
 #elif defined(CONFIG_BACKLIGHT_LUISA)
 #define DIMMING_VALUE		1
 #elif defined(CONFIG_BACKLIGHT_TASSVE)
@@ -66,7 +66,7 @@
 #define DIMMING_VALUE		1
 #endif
 #define MAX_BRIGHTNESS_VALUE	255
-#define MIN_BRIGHTNESS_VALUE	30
+#define MIN_BRIGHTNESS_VALUE	12
 #define BACKLIGHT_DEBUG 0
 #define BACKLIGHT_SUSPEND 0
 #define BACKLIGHT_RESUME 1
@@ -92,33 +92,35 @@
 
 #if defined(CONFIG_BACKLIGHT_TOTORO)
 struct brt_value brt_table_ktd[] = {
-	{ MIN_BRIGHTNESS_VALUE,  2 }, // Min pulse 27(33-6) by HW 
-	{ 39,  3 }, 
-	{ 48,  4 }, 
-	{ 57,  5 }, 
-	{ 66,  6 }, 
-	{ 75,  7 }, 
-	{ 84,  8 },  
-	{ 93,  9 }, 
-	{ 102,	10 }, 
-	{ 111,	11 },	
-	{ 120,	12 }, 
-	{ 129,	13 }, 
-	{ 138,  14 },//default value 21 (33-12) 
-	{ 147,	15 }, 
-	{ 155,  16 },
-	{ 163,	17 },  
-	{ 170,	18 },  
-	{ 178,	19 }, 
-	{ 186,  20 },
-	{ 194,  21 }, 
-	{ 202,  22 },
-	{ 210,	23 },  
-	{ 219,	24 }, 
-	{ 228,	25 }, 
-	{ 237,  26 },  
-	{ 246,	27 }, 
-	{ MAX_BRIGHTNESS_VALUE,  28 }, // Max pulse 7(33-26) by HW
+	{ MIN_BRIGHTNESS_VALUE,  1 }, // Min pulse 27(33-6) by HW 
+	{ 21,  2 }, 
+	{ 30,  3 }, 
+	{ 39,  4 }, 
+	{ 48,  5 }, 
+	{ 57,  6 }, 
+	{ 66,  7 }, 
+	{ 75,  8 }, 
+	{ 84,  9 },  
+	{ 93,  10 }, 
+	{ 102,	11 }, 
+	{ 111,	12 },	
+	{ 120,	13 }, 
+	{ 129,	14 }, 
+	{ 138,  15 },//default value 21 (33-12) 
+	{ 147,	16 }, 
+	{ 155,  17 },
+	{ 163,	18 },  
+	{ 170,	19 },  
+	{ 178,	20 }, 
+	{ 186,  21 },
+	{ 194,  22 }, 
+	{ 202,  23 },
+	{ 210,	24 },  
+	{ 219,	25 }, 
+	{ 228,	26 }, 
+	{ 237,  27 },  
+	{ 246,	28 }, 
+	{ MAX_BRIGHTNESS_VALUE,  29 }, // Max pulse 7(33-26) by HW
 
 };
 #elif defined(CONFIG_BACKLIGHT_LUISA)
